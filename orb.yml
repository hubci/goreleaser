version: 2.1

description: |
  Easily install and use GoReleaser on CircleCI. GoReleaser is a Go (Golang)
  publishing and release tool. You can publish Go projects to GitHub, Brew,
  Snap, and more.

  Currently supports Linux and macOS on amd64 and arm64.

display:
  home_url: "https://circleci.com/developer/orbs/orb/hubci/goreleaser"
  source_url: "https://github.com/hubci/goreleaser-orb"

orbs:
  ci: hubci/sphere@0.1
  go: circleci/go@1.7

executors:
  cimg:
    docker:
      - image: cimg/go:<< parameters.go-version >>
    parameters:
      go-version:
        type: string
  linux:
    machine:
      image: ubuntu-2004:202201-02
    parameters:
      go-version:
        type: string
  mac:
    macos:
      xcode: 13.0.0
    parameters:
      go-version:
        type: string

commands:
  install:
    description: |
      Install GoReleaser in a job. This command supports Linux and macOS on both amd64 and arm64. Installs to ~/bin.
    parameters:
      version:
        description: The GoReleaser version. This is a full SemVer version.
        type: string
    steps:
      - ci/init
      - run:
          name: "Install GoReleaser"
          command: |
            # Ensures the directory we need exist.
            # Assuming this path is in PATH should move to hubci/sphere at some point.
            mkdir -p ~/bin

            # Get the CPU arch. This will also move to hubci/sphere in the future
            cpuArch=$( uname -m )

            # set the OS name for the asset URL
            case $OSD_FAMILY in
              linux)
                osName="Linux"
                installPath=~/bin
                ;;
              darwin)
                osName="Darwin"
                # this is done because CCI mac images don't have ~/bin in PATH
                installPath=/usr/local/bin
                ;;
              *)
                echo "Unsupported Operating System"
                exit 1
                ;;
            esac

            dlURL="https://github.com/goreleaser/goreleaser/releases/download/v<<parameters.version>>/goreleaser_${osName}_${cpuArch}.tar.gz"
            curl -sSL $dlURL | $SUDO tar -xz -C ${installPath} goreleaser
  release:
    description: Run GoReleaser. Optionally without actually publishing.
    parameters:
      dry-run:
        description: |
          Basically runs `goreleaser --snapshot --skip-publish --rm-dist` for
          you when true.
        type: boolean
        default: false
    steps:
      - when:
          condition: <<parameters.dry-run>>
          steps:
            - run: goreleaser --snapshot --skip-publish --rm-dist
      - unless:
          condition: <<parameters.dry-run>>
          steps:
            - run: goreleaser

jobs:
  release:
    parameters:
      version:
        description: The GoReleaser version. This is a full SemVer version.
        type: string
      go-version:
        description: The version of Go to build with.
        type: string
      dry-run:
        description: |
          Basically runs `goreleaser --snapshot --skip-publish --rm-dist` for
          you when true.
        type: boolean
        default: false
      image:
        description: |
          Which image/executor technology to run with. Check the executors
          shipped with this orb for possible values. Defaults to "cimg"
          which uses the `cimg/go` Convenience Image.
        type: enum
        enum:
          - cimg
          - linux
          - mac
        default: cimg
      checkout:
        description: "Whether or not to run the CircleCI checkout step."
        type: boolean
        default: true
    executor:
      name: << parameters.image >>
      go-version: << parameters.go-version >>
    description: Release a Go (golang) project or do a test build.
    steps:
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - go/install:
          version: << parameters.go-version >>
      - install:
          version: <<parameters.version>>
      - release:
          dry-run: <<parameters.dry-run>>

examples:
  main:
    description: "An example of how to use the job included in the GoReleaser orb."
    usage:
      version: 2.1

      orbs:
        gor: hubci/goreleaser@2.0

      workflows:
        # General workflow for regular commits
        main-wf:
          jobs:
            - test
            - gor/release:
                version: "1.7.0"
                go-version: "1.18"
                dry-run: true
        # Workflow for releasing with git tags
        release-wf:
          jobs:
            - test:
                filters:
                  branches:
                    ignore: /.*/
                  tags:
                    # Simplified SemVer regex
                    only: /^v\d+\.\d+\.\d+$/
            - gor/release:
                version: "1.7.0"
                go-version: "1.18"
                filters:
                  branches:
                    ignore: /.*/
                  tags:
                    # Simplified SemVer regex
                    only: /^v\d+\.\d+\.\d+$/

      jobs:
        test:
          docker:
            - image: cimg/go:1.18
          steps:
            - checkout
            - restore_cache:
                keys:
                  - go-mod-v1
            - run:
                name: "Download Dependancies"
                command: cd src && go mod download
            - run:
                name: "Run Tests"
                command: cd src && go test
            - save_cache:
                key: go-mod-v1
                paths:
                  - "/go/pkg/mod"
  custom-image:
    description: "An example of how to use the job included in the GoReleaser orb but with a custom image."
    usage:
      version: 2.1

      orbs:
        gor: hubci/goreleaser@2.0

      workflows:
        # General workflow for regular commits
        main-wf:
          jobs:
            - gor/release:
                version: "1.7.0"
                go-version: "1.18"
                dry-run: true
                image: mac
